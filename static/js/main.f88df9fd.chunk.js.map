{"version":3,"sources":["components/BookForm/index.js","components/EditBook/index.js","components/BookList/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["BookForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bookName","authorName","numOfPages","isRead","handleInputChange","bind","assertThisInitialized","handleCheckboxChange","handleSubmit","book","setState","objectSpread","e","name","defineProperty","target","value","prevState","preventDefault","_this$state","formBook","saveBook","_this2","_this$state2","react_default","a","createElement","style","width","textAlign","onSubmit","display","Grid_default","container","justify","item","xs","sm","md","TextField_default","type","variant","label","placeholder","margin","onChange","required","FormControlLabel_default","control","Checkbox_default","color","checked","marginTop","marginRight","paddingLeft","Button_default","height","top","Component","EditBook","open","handleOpen","handleClose","handleEdit","editBook","index","Fragment","onClick","Edit_default","Modal_default","onClose","Paper_default","className","components_BookForm","BookList","_this$props","books","deleteBook","overflowX","Table_default","TableHead_default","TableRow_default","TableCell_default","padding","numeric","TableBody_default","map","key","components_EditBook","Delete_default","App","addBook","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","removeEventListener","localStorage","hasOwnProperty","getItem","JSON","parse","setItem","stringify","push","splice","components_BookList","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f88df9fd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Grid from \"@material-ui/core/Grid\";\n\nclass BookForm extends Component {\n  static propTypes = {\n    saveBook: PropTypes.func.isRequired,\n    book: PropTypes.object\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      bookName: \"\",\n      authorName: \"\",\n      numOfPages: \"\",\n      isRead: false\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.book) {\n      this.setState({\n        ...this.props.book\n      });\n    }\n  }\n\n  handleInputChange(e, name) {\n    this.setState({ [name]: e.target.value });\n  }\n\n  handleCheckboxChange() {\n    this.setState(prevState => ({ isRead: !prevState.isRead }));\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    const { bookName, authorName, numOfPages, isRead } = this.state;\n    const formBook = { bookName, authorName, numOfPages, isRead };\n\n    this.props.saveBook(formBook);\n\n    this.setState({\n      bookName: \"\",\n      authorName: \"\",\n      numOfPages: 0,\n      isRead: false\n    });\n  }\n\n  render() {\n    const { bookName, authorName, numOfPages, isRead } = this.state;\n\n    return (\n      <div style={{ width: \"100%\", textAlign: \"center\" }}>\n        <h1>{this.props.book ? \"Edit Book\" : \"Library\"}</h1>\n\n        <form onSubmit={this.handleSubmit} style={{ display: \"flex\" }}>\n          <Grid container justify={\"space-around\"}>\n            <Grid item xs={12} sm={3} md={2}>\n              <TextField\n                type=\"text\"\n                name=\"bookName\"\n                variant=\"outlined\"\n                label=\"Book Name\"\n                placeholder=\"Book Name\"\n                margin=\"normal\"\n                value={bookName}\n                onChange={e => this.handleInputChange(e, \"bookName\")}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} sm={3} md={2}>\n              <TextField\n                type=\"text\"\n                name=\"authorName\"\n                variant=\"outlined\"\n                label=\"Author Name\"\n                placeholder=\"Author Name\"\n                margin=\"normal\"\n                value={authorName}\n                onChange={e => this.handleInputChange(e, \"authorName\")}\n                required\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={3} md={2}>\n              <TextField\n                type=\"number\"\n                name=\"numOfPages\"\n                variant=\"outlined\"\n                label=\"Number of Pages\"\n                placeholder=\"Number of Pages\"\n                margin=\"normal\"\n                value={numOfPages}\n                onChange={e => this.handleInputChange(e, \"numOfPages\")}\n                required\n              />\n            </Grid>\n\n            <Grid item xs={6} sm={3} md={2}>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    type=\"checkbox\"\n                    name=\"read\"\n                    color=\"primary\"\n                    checked={isRead}\n                    onChange={this.handleCheckboxChange}\n                  />\n                }\n                label=\"Did you read this book?\"\n                style={{\n                  marginTop: \"15px\",\n                  marginRight: \"0\",\n                  paddingLeft: \"25px\"\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={6} md={2}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                type=\"submit\"\n                style={{ height: \"40px\", top: \"20px\" }}\n              >\n                Save Book\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default BookForm;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport BookForm from \"../BookForm\";\nimport \"./EditBook.css\";\n\nclass EditBook extends Component {\n  static propTypes = {\n    book: PropTypes.object.isRequired,\n    editBook: PropTypes.func.isRequired,\n    index: PropTypes.number.isRequired\n  };\n\n  state = {\n    open: false\n  };\n\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleEdit = book => {\n    this.props.editBook(book, this.props.index);\n    this.handleClose();\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Button color=\"primary\" onClick={this.handleOpen}>\n          <EditIcon />\n        </Button>\n        <Modal open={this.state.open} onClose={this.handleClose}>\n          <Paper className=\"editForm\">\n            <BookForm book={this.props.book} saveBook={this.handleEdit} />\n          </Paper>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default EditBook;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport EditBook from \"../EditBook/\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nclass BookList extends Component {\n  static propTypes = {\n    books: PropTypes.array.isRequired,\n    deleteBook: PropTypes.func.isRequired,\n    editBook: PropTypes.func.isRequired\n  };\n\n  render() {\n    const { books, deleteBook, editBook } = this.props;\n\n    return (\n      <Grid item xs={12} style={{ marginTop: \"30px\" }}>\n        <Paper style={{ overflowX: \"auto\" }}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell style={{ padding: \"0 25px\" }}>Book Name</TableCell>\n                <TableCell style={{ padding: \"0 25px\" }}>Author Name</TableCell>\n                <TableCell numeric style={{ padding: \"0 25px\" }}>\n                  Number of Pages\n                </TableCell>\n                <TableCell style={{ padding: \"0 25px\" }}>\n                  Book is read?\n                </TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {books.map((book, index) => {\n                return (\n                  <TableRow key={index}>\n                    <TableCell>{book.bookName}</TableCell>\n                    <TableCell>{book.authorName}</TableCell>\n                    <TableCell numeric>{book.numOfPages}</TableCell>\n                    <TableCell>{book.isRead ? \"Yes\" : \"No\"}</TableCell>\n                    <TableCell>\n                      <EditBook book={book} editBook={editBook} index={index} />\n                      <Button color=\"secondary\">\n                        <DeleteIcon onClick={() => deleteBook(index)} />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </Paper>\n      </Grid>\n    );\n  }\n}\n\nexport default BookList;\n","import React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport BookList from \"../BookList/\";\nimport BookForm from \"../BookForm/\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      books: [\n        {\n          bookName: \"The Whisperer\",\n          authorName: \"Donato Carrisi\",\n          numOfPages: 547,\n          isRead: true\n        }\n      ]\n    };\n\n    this.addBook = this.addBook.bind(this);\n    this.deleteBook = this.deleteBook.bind(this);\n    this.editBook = this.editBook.bind(this);\n  }\n\n  componentDidMount() {\n    this.hydrateStateWithLocalStorage();\n\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n\n    this.saveStateToLocalStorage();\n  }\n\n  hydrateStateWithLocalStorage() {\n    for (let key in this.state) {\n      if (localStorage.hasOwnProperty(key)) {\n        let value = localStorage.getItem(key);\n\n        try {\n          value = JSON.parse(value);\n          this.setState({ [key]: value });\n        } catch (e) {\n          this.setState({ [key]: value });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    for (let key in this.state) {\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  addBook(book) {\n    const { books } = this.state;\n\n    books.push(book);\n\n    this.setState({\n      books\n    });\n\n    localStorage.setItem(\"books\", JSON.stringify(books));\n  }\n\n  deleteBook(index) {\n    const { books } = this.state;\n\n    books.splice(index, 1);\n\n    this.setState({\n      books\n    });\n  }\n\n  editBook(book, index) {\n    const { books } = this.state;\n\n    books[index] = book;\n\n    this.setState({\n      books\n    });\n  }\n\n  render() {\n    return (\n      <Grid container>\n        <BookForm saveBook={this.addBook} />\n        <BookList\n          books={this.state.books}\n          deleteBook={this.deleteBook}\n          editBook={this.editBook}\n        />\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}